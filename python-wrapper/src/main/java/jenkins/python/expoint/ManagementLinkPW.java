package jenkins.python.expoint;


import hudson.ExtensionPoint;
import hudson.ExtensionListView;
import hudson.Extension;
import hudson.ExtensionList;
import hudson.security.Permission;
import jenkins.model.Jenkins;
import java.util.List;
import org.kohsuke.stapler.interceptor.RequirePOST;
import hudson.model.*;
import hudson.model.ManagementLink.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.model.ManagementLink
 */
public abstract class ManagementLinkPW extends ManagementLink {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[2];
			jMethods[0] = "getIconFileName";
			jMethods[1] = "getUrlName";
			String[] pFuncs = new String[2];
			pFuncs[0] = "get_icon_file_name";
			pFuncs[1] = "get_url_name";
			Class[][] argTypes = new Class[2][];
			argTypes[0] = new Class[0];
			argTypes[1] = new Class[0];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[3];
			functions[0] = "get_description";
			functions[1] = "get_requires_confirmation";
			functions[2] = "get_required_permission";
			int[] argsCount = new int[3];
			argsCount[0] = 0;
			argsCount[1] = 0;
			argsCount[2] = 0;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	@Override
	public String getIconFileName() {
		initPython();
		return (String) pexec.execPython("get_icon_file_name");
	}

	@Override
	public String getUrlName() {
		initPython();
		return (String) pexec.execPython("get_url_name");
	}

	@Override
	public String getDescription() {
		initPython();
		if (pexec.isImplemented(0)) {
			return (String) pexec.execPython("get_description");
		} else {
			return super.getDescription();
		}
	}

	@Override
	public boolean getRequiresConfirmation() {
		initPython();
		if (pexec.isImplemented(1)) {
			return pexec.execPythonBool("get_requires_confirmation");
		} else {
			return super.getRequiresConfirmation();
		}
	}

	@Override
	public Permission getRequiredPermission() {
		initPython();
		if (pexec.isImplemented(2)) {
			return (Permission) pexec.execPython("get_required_permission");
		} else {
			return super.getRequiredPermission();
		}
	}

	public String superGetDescription() {
		return super.getDescription();
	}

	public boolean superGetRequiresConfirmation() {
		return super.getRequiresConfirmation();
	}

	public Permission superGetRequiredPermission() {
		return super.getRequiredPermission();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
