package jenkins.python.expoint;


import hudson.ExtensionPoint;
import hudson.ExtensionListView;
import hudson.Extension;
import hudson.ExtensionList;
import hudson.FilePath;
import hudson.Launcher;
import hudson.model.AbstractBuild;
import hudson.model.BuildListener;
import hudson.model.Environment;
import hudson.model.JobProperty;
import hudson.model.Run;
import hudson.model.Run.RunnerAbortedException;
import hudson.model.TaskListener;
import jenkins.model.Jenkins;
import hudson.scm.SCM;
import hudson.tasks.BuildWrapper;
import hudson.util.CopyOnWriteList;
import org.jvnet.tiger_types.Types;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.Nonnull;
import hudson.model.listeners.*;
import hudson.model.listeners.RunListener.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.model.listeners.RunListener
 */
public abstract class RunListenerPW<R extends Run> extends RunListener<R> {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[0];
			String[] pFuncs = new String[0];
			Class[][] argTypes = new Class[0][];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[7];
			functions[0] = "on_completed";
			functions[1] = "on_finalized";
			functions[2] = "on_started";
			functions[3] = "set_up_environment";
			functions[4] = "on_deleted";
			functions[5] = "register";
			functions[6] = "unregister";
			int[] argsCount = new int[7];
			argsCount[0] = 2;
			argsCount[1] = 1;
			argsCount[2] = 2;
			argsCount[3] = 3;
			argsCount[4] = 1;
			argsCount[5] = 0;
			argsCount[6] = 0;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	public RunListenerPW(Class<R> targetType) {
		super(targetType);
	}

	public RunListenerPW() {
		super();
	}

	@Override
	public void onCompleted(R r, @Nonnull TaskListener listener) {
		initPython();
		if (pexec.isImplemented(0)) {
			pexec.execPythonVoid("on_completed", r, listener);
		} else {
			super.onCompleted(r, listener);
		}
	}

	@Override
	public void onFinalized(R r) {
		initPython();
		if (pexec.isImplemented(1)) {
			pexec.execPythonVoid("on_finalized", r);
		} else {
			super.onFinalized(r);
		}
	}

	@Override
	public void onStarted(R r, TaskListener listener) {
		initPython();
		if (pexec.isImplemented(2)) {
			pexec.execPythonVoid("on_started", r, listener);
		} else {
			super.onStarted(r, listener);
		}
	}

	@Override
	public Environment setUpEnvironment(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException, RunnerAbortedException {
		initPython();
		if (pexec.isImplemented(3)) {
			return (Environment) pexec.execPython("set_up_environment", build, launcher, listener);
		} else {
			return super.setUpEnvironment(build, launcher, listener);
		}
	}

	@Override
	public void onDeleted(R r) {
		initPython();
		if (pexec.isImplemented(4)) {
			pexec.execPythonVoid("on_deleted", r);
		} else {
			super.onDeleted(r);
		}
	}

	@Override
	public void register() {
		initPython();
		if (pexec.isImplemented(5)) {
			pexec.execPythonVoid("register");
		} else {
			super.register();
		}
	}

	@Override
	public void unregister() {
		initPython();
		if (pexec.isImplemented(6)) {
			pexec.execPythonVoid("unregister");
		} else {
			super.unregister();
		}
	}

	public void superOnCompleted(R r, @Nonnull TaskListener listener) {
		super.onCompleted(r, listener);
	}

	public void superOnFinalized(R r) {
		super.onFinalized(r);
	}

	public void superOnStarted(R r, TaskListener listener) {
		super.onStarted(r, listener);
	}

	public Environment superSetUpEnvironment(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException, RunnerAbortedException {
		return super.setUpEnvironment(build, launcher, listener);
	}

	public void superOnDeleted(R r) {
		super.onDeleted(r);
	}

	public void superRegister() {
		super.register();
	}

	public void superUnregister() {
		super.unregister();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
