package jenkins.python.expoint;


import hudson.model.Computer;
import jenkins.model.Jenkins;
import hudson.model.TaskListener;
import hudson.model.Node;
import hudson.ExtensionPoint;
import hudson.Extension;
import hudson.ExtensionList;
import hudson.FilePath;
import hudson.remoting.Channel;
import hudson.AbortException;
import java.io.IOException;
import hudson.slaves.*;
import hudson.slaves.ComputerListener.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.slaves.ComputerListener
 */
public abstract class ComputerListenerPW extends ComputerListener {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[0];
			String[] pFuncs = new String[0];
			Class[][] argTypes = new Class[0][];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[9];
			functions[0] = "pre_launch";
			functions[1] = "on_launch_failure";
			functions[2] = "pre_online";
			functions[3] = "on_online";
			functions[4] = "on_online";
			functions[5] = "on_offline";
			functions[6] = "on_temporarily_online";
			functions[7] = "on_temporarily_offline";
			functions[8] = "on_configuration_change";
			int[] argsCount = new int[9];
			argsCount[0] = 2;
			argsCount[1] = 2;
			argsCount[2] = 4;
			argsCount[3] = 1;
			argsCount[4] = 2;
			argsCount[5] = 1;
			argsCount[6] = 1;
			argsCount[7] = 2;
			argsCount[8] = 0;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	@Override
	public void preLaunch(Computer c, TaskListener taskListener) throws IOException, InterruptedException {
		initPython();
		if (pexec.isImplemented(0)) {
			pexec.execPythonVoid("pre_launch", c, taskListener);
		} else {
			super.preLaunch(c, taskListener);
		}
	}

	@Override
	public void onLaunchFailure(Computer c, TaskListener taskListener) throws IOException, InterruptedException {
		initPython();
		if (pexec.isImplemented(1)) {
			pexec.execPythonVoid("on_launch_failure", c, taskListener);
		} else {
			super.onLaunchFailure(c, taskListener);
		}
	}

	@Override
	public void preOnline(Computer c, Channel channel, FilePath root, TaskListener listener) throws IOException, InterruptedException {
		initPython();
		if (pexec.isImplemented(2)) {
			pexec.execPythonVoid("pre_online", c, channel, root, listener);
		} else {
			super.preOnline(c, channel, root, listener);
		}
	}

	@Override
	public void onOnline(Computer c) {
		initPython();
		if (pexec.isImplemented(3)) {
			pexec.execPythonVoid("on_online", c);
		} else {
			super.onOnline(c);
		}
	}

	@Override
	public void onOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {
		initPython();
		if (pexec.isImplemented(4)) {
			pexec.execPythonVoid("on_online", c, listener);
		} else {
			super.onOnline(c, listener);
		}
	}

	@Override
	public void onOffline(Computer c) {
		initPython();
		if (pexec.isImplemented(5)) {
			pexec.execPythonVoid("on_offline", c);
		} else {
			super.onOffline(c);
		}
	}

	@Override
	public void onTemporarilyOnline(Computer c) {
		initPython();
		if (pexec.isImplemented(6)) {
			pexec.execPythonVoid("on_temporarily_online", c);
		} else {
			super.onTemporarilyOnline(c);
		}
	}

	@Override
	public void onTemporarilyOffline(Computer c, OfflineCause cause) {
		initPython();
		if (pexec.isImplemented(7)) {
			pexec.execPythonVoid("on_temporarily_offline", c, cause);
		} else {
			super.onTemporarilyOffline(c, cause);
		}
	}

	@Override
	public void onConfigurationChange() {
		initPython();
		if (pexec.isImplemented(8)) {
			pexec.execPythonVoid("on_configuration_change");
		} else {
			super.onConfigurationChange();
		}
	}

	public void superPreLaunch(Computer c, TaskListener taskListener) throws IOException, InterruptedException {
		super.preLaunch(c, taskListener);
	}

	public void superOnLaunchFailure(Computer c, TaskListener taskListener) throws IOException, InterruptedException {
		super.onLaunchFailure(c, taskListener);
	}

	public void superPreOnline(Computer c, Channel channel, FilePath root, TaskListener listener) throws IOException, InterruptedException {
		super.preOnline(c, channel, root, listener);
	}

	public void superOnOnline(Computer c) {
		super.onOnline(c);
	}

	public void superOnOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {
		super.onOnline(c, listener);
	}

	public void superOnOffline(Computer c) {
		super.onOffline(c);
	}

	public void superOnTemporarilyOnline(Computer c) {
		super.onTemporarilyOnline(c);
	}

	public void superOnTemporarilyOffline(Computer c, OfflineCause cause) {
		super.onTemporarilyOffline(c, cause);
	}

	public void superOnConfigurationChange() {
		super.onConfigurationChange();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
