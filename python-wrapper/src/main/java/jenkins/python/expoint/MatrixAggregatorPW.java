package jenkins.python.expoint;


import hudson.ExtensionPoint;
import hudson.Launcher;
import hudson.model.BuildListener;
import hudson.tasks.BuildStep;
import hudson.tasks.Publisher;
import java.io.IOException;
import hudson.matrix.*;
import hudson.matrix.MatrixAggregator.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.matrix.MatrixAggregator
 */
public abstract class MatrixAggregatorPW extends MatrixAggregator {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[0];
			String[] pFuncs = new String[0];
			Class[][] argTypes = new Class[0][];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[3];
			functions[0] = "start_build";
			functions[1] = "end_run";
			functions[2] = "end_build";
			int[] argsCount = new int[3];
			argsCount[0] = 0;
			argsCount[1] = 1;
			argsCount[2] = 0;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	public MatrixAggregatorPW(MatrixBuild build, Launcher launcher, BuildListener listener) {
		super(build, launcher, listener);
	}

	@Override
	public boolean startBuild() throws InterruptedException, IOException {
		initPython();
		if (pexec.isImplemented(0)) {
			return pexec.execPythonBool("start_build");
		} else {
			return super.startBuild();
		}
	}

	@Override
	public boolean endRun(MatrixRun run) throws InterruptedException, IOException {
		initPython();
		if (pexec.isImplemented(1)) {
			return pexec.execPythonBool("end_run", run);
		} else {
			return super.endRun(run);
		}
	}

	@Override
	public boolean endBuild() throws InterruptedException, IOException {
		initPython();
		if (pexec.isImplemented(2)) {
			return pexec.execPythonBool("end_build");
		} else {
			return super.endBuild();
		}
	}

	public boolean superStartBuild() throws InterruptedException, IOException {
		return super.startBuild();
	}

	public boolean superEndRun(MatrixRun run) throws InterruptedException, IOException {
		return super.endRun(run);
	}

	public boolean superEndBuild() throws InterruptedException, IOException {
		return super.endBuild();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
