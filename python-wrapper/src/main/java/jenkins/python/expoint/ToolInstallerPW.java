package jenkins.python.expoint;


import hudson.ExtensionPoint;
import hudson.FilePath;
import hudson.Util;
import hudson.model.Describable;
import jenkins.model.Jenkins;
import hudson.model.Label;
import hudson.model.Node;
import hudson.model.TaskListener;
import java.io.File;
import java.io.IOException;
import org.kohsuke.stapler.DataBoundConstructor;
import hudson.tools.*;
import hudson.tools.ToolInstaller.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.tools.ToolInstaller
 */
public abstract class ToolInstallerPW extends ToolInstaller {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[1];
			jMethods[0] = "performInstallation";
			String[] pFuncs = new String[1];
			pFuncs[0] = "perform_installation";
			Class[][] argTypes = new Class[1][];
			argTypes[0] = new Class[3];
			argTypes[0][0] = ToolInstallation.class;
			argTypes[0][1] = Node.class;
			argTypes[0][2] = TaskListener.class;
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[3];
			functions[0] = "set_tool";
			functions[1] = "applies_to";
			functions[2] = "get_descriptor";
			int[] argsCount = new int[3];
			argsCount[0] = 1;
			argsCount[1] = 1;
			argsCount[2] = 0;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	public ToolInstallerPW(String label) {
		super(label);
	}

	@Override
	public FilePath performInstallation(ToolInstallation tool, Node node, TaskListener log) throws IOException, InterruptedException {
		initPython();
		return (FilePath) pexec.execPython("perform_installation", tool, node, log);
	}

	@Override
	public void setTool(ToolInstallation t) {
		initPython();
		if (pexec.isImplemented(0)) {
			pexec.execPythonVoid("set_tool", t);
		} else {
			super.setTool(t);
		}
	}

	@Override
	public boolean appliesTo(Node node) {
		initPython();
		if (pexec.isImplemented(1)) {
			return pexec.execPythonBool("applies_to", node);
		} else {
			return super.appliesTo(node);
		}
	}

	@Override
	public ToolInstallerDescriptor<?> getDescriptor() {
		initPython();
		if (pexec.isImplemented(2)) {
			return (ToolInstallerDescriptor) pexec.execPython("get_descriptor");
		} else {
			return super.getDescriptor();
		}
	}

	public void superSetTool(ToolInstallation t) {
		super.setTool(t);
	}

	public boolean superAppliesTo(Node node) {
		return super.appliesTo(node);
	}

	public ToolInstallerDescriptor<?> superGetDescriptor() {
		return super.getDescriptor();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
