package jenkins.python.expoint;


import hudson.ExtensionList;
import hudson.ExtensionPoint;
import hudson.scm.PollingResult;
import jenkins.model.Jenkins;
import hudson.model.AbstractProject;
import hudson.model.TaskListener;
import java.io.IOException;
import hudson.model.listeners.*;
import hudson.model.listeners.SCMPollListener.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.model.listeners.SCMPollListener
 */
public abstract class SCMPollListenerPW extends SCMPollListener {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[0];
			String[] pFuncs = new String[0];
			Class[][] argTypes = new Class[0][];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[3];
			functions[0] = "on_before_polling";
			functions[1] = "on_polling_success";
			functions[2] = "on_polling_failed";
			int[] argsCount = new int[3];
			argsCount[0] = 2;
			argsCount[1] = 3;
			argsCount[2] = 3;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	@Override
	public void onBeforePolling(AbstractProject<?, ?> project, TaskListener listener) {
		initPython();
		if (pexec.isImplemented(0)) {
			pexec.execPythonVoid("on_before_polling", project, listener);
		} else {
			super.onBeforePolling(project, listener);
		}
	}

	@Override
	public void onPollingSuccess(AbstractProject<?, ?> project, TaskListener listener, PollingResult result) {
		initPython();
		if (pexec.isImplemented(1)) {
			pexec.execPythonVoid("on_polling_success", project, listener, result);
		} else {
			super.onPollingSuccess(project, listener, result);
		}
	}

	@Override
	public void onPollingFailed(AbstractProject<?, ?> project, TaskListener listener, Throwable exception) {
		initPython();
		if (pexec.isImplemented(2)) {
			pexec.execPythonVoid("on_polling_failed", project, listener, exception);
		} else {
			super.onPollingFailed(project, listener, exception);
		}
	}

	public void superOnBeforePolling(AbstractProject<?, ?> project, TaskListener listener) {
		super.onBeforePolling(project, listener);
	}

	public void superOnPollingSuccess(AbstractProject<?, ?> project, TaskListener listener, PollingResult result) {
		super.onPollingSuccess(project, listener, result);
	}

	public void superOnPollingFailed(AbstractProject<?, ?> project, TaskListener listener, Throwable exception) {
		super.onPollingFailed(project, listener, exception);
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
