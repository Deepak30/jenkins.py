package jenkins.python.expoint;


import hudson.ExtensionPoint;
import hudson.ExtensionList;
import hudson.Extension;
import hudson.ExtensionPoint.LegacyInstancesAreScopedToHudson;
import hudson.triggers.SCMTrigger;
import hudson.triggers.TimerTrigger;
import java.util.Set;
import java.io.IOException;
import jenkins.model.Jenkins;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import hudson.model.*;
import hudson.model.AdministrativeMonitor.*;
import hudson.search.SearchFactory;
import org.kohsuke.stapler.Stapler;
import javax.servlet.ServletException;
import hudson.search.SearchableModelObject;
import hudson.search.Search;
import hudson.search.SearchIndexBuilder;
import hudson.search.SearchIndex;
import org.kohsuke.stapler.interceptor.RequirePOST;
import hudson.model.AbstractModelObject.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.model.AdministrativeMonitor
 */
public abstract class AdministrativeMonitorPW extends AdministrativeMonitor {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[1];
			jMethods[0] = "isActivated";
			String[] pFuncs = new String[1];
			pFuncs[0] = "is_activated";
			Class[][] argTypes = new Class[1][];
			argTypes[0] = new Class[0];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[8];
			functions[0] = "get_url";
			functions[1] = "get_display_name";
			functions[2] = "disable";
			functions[3] = "is_enabled";
			functions[4] = "do_disable";
			functions[5] = "make_search_index";
			functions[6] = "get_search";
			functions[7] = "get_search_name";
			int[] argsCount = new int[8];
			argsCount[0] = 0;
			argsCount[1] = 0;
			argsCount[2] = 1;
			argsCount[3] = 0;
			argsCount[4] = 2;
			argsCount[5] = 0;
			argsCount[6] = 0;
			argsCount[7] = 0;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	public AdministrativeMonitorPW(String id) {
		super(id);
	}

	public AdministrativeMonitorPW() {
		super();
	}

	@Override
	public boolean isActivated() {
		initPython();
		return pexec.execPythonBool("is_activated");
	}

	@Override
	public String getUrl() {
		initPython();
		if (pexec.isImplemented(0)) {
			return (String) pexec.execPython("get_url");
		} else {
			return super.getUrl();
		}
	}

	@Override
	public String getDisplayName() {
		initPython();
		if (pexec.isImplemented(1)) {
			return (String) pexec.execPython("get_display_name");
		} else {
			return super.getDisplayName();
		}
	}

	@Override
	public void disable(boolean value) throws IOException {
		initPython();
		if (pexec.isImplemented(2)) {
			pexec.execPythonVoid("disable", DataConvertor.fromBool(value));
		} else {
			super.disable(value);
		}
	}

	@Override
	public boolean isEnabled() {
		initPython();
		if (pexec.isImplemented(3)) {
			return pexec.execPythonBool("is_enabled");
		} else {
			return super.isEnabled();
		}
	}

	@Override
	public void doDisable(StaplerRequest req, StaplerResponse rsp) throws IOException {
		initPython();
		if (pexec.isImplemented(4)) {
			pexec.execPythonVoid("do_disable", req, rsp);
		} else {
			super.doDisable(req, rsp);
		}
	}

	@Override
	public SearchIndexBuilder makeSearchIndex() {
		initPython();
		if (pexec.isImplemented(5)) {
			return (SearchIndexBuilder) pexec.execPython("make_search_index");
		} else {
			return super.makeSearchIndex();
		}
	}

	@Override
	public Search getSearch() {
		initPython();
		if (pexec.isImplemented(6)) {
			return (Search) pexec.execPython("get_search");
		} else {
			return super.getSearch();
		}
	}

	@Override
	public String getSearchName() {
		initPython();
		if (pexec.isImplemented(7)) {
			return (String) pexec.execPython("get_search_name");
		} else {
			return super.getSearchName();
		}
	}

	public String superGetUrl() {
		return super.getUrl();
	}

	public String superGetDisplayName() {
		return super.getDisplayName();
	}

	public void superDisable(boolean value) throws IOException {
		super.disable(value);
	}

	public boolean superIsEnabled() {
		return super.isEnabled();
	}

	public void superDoDisable(StaplerRequest req, StaplerResponse rsp) throws IOException {
		super.doDisable(req, rsp);
	}

	public SearchIndexBuilder superMakeSearchIndex() {
		return super.makeSearchIndex();
	}

	public Search superGetSearch() {
		return super.getSearch();
	}

	public String superGetSearchName() {
		return super.getSearchName();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
