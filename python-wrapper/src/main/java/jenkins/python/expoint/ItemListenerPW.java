package jenkins.python.expoint;


import hudson.ExtensionPoint;
import hudson.ExtensionList;
import hudson.Extension;
import jenkins.model.Jenkins;
import hudson.model.Item;
import hudson.model.listeners.*;
import hudson.model.listeners.ItemListener.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.model.listeners.ItemListener
 */
public abstract class ItemListenerPW extends ItemListener {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[0];
			String[] pFuncs = new String[0];
			Class[][] argTypes = new Class[0][];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[8];
			functions[0] = "on_created";
			functions[1] = "on_copied";
			functions[2] = "on_loaded";
			functions[3] = "on_deleted";
			functions[4] = "on_renamed";
			functions[5] = "on_updated";
			functions[6] = "on_before_shutdown";
			functions[7] = "register";
			int[] argsCount = new int[8];
			argsCount[0] = 1;
			argsCount[1] = 2;
			argsCount[2] = 0;
			argsCount[3] = 1;
			argsCount[4] = 3;
			argsCount[5] = 1;
			argsCount[6] = 0;
			argsCount[7] = 0;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	@Override
	public void onCreated(Item item) {
		initPython();
		if (pexec.isImplemented(0)) {
			pexec.execPythonVoid("on_created", item);
		} else {
			super.onCreated(item);
		}
	}

	@Override
	public void onCopied(Item src, Item item) {
		initPython();
		if (pexec.isImplemented(1)) {
			pexec.execPythonVoid("on_copied", src, item);
		} else {
			super.onCopied(src, item);
		}
	}

	@Override
	public void onLoaded() {
		initPython();
		if (pexec.isImplemented(2)) {
			pexec.execPythonVoid("on_loaded");
		} else {
			super.onLoaded();
		}
	}

	@Override
	public void onDeleted(Item item) {
		initPython();
		if (pexec.isImplemented(3)) {
			pexec.execPythonVoid("on_deleted", item);
		} else {
			super.onDeleted(item);
		}
	}

	@Override
	public void onRenamed(Item item, String oldName, String newName) {
		initPython();
		if (pexec.isImplemented(4)) {
			pexec.execPythonVoid("on_renamed", item, oldName, newName);
		} else {
			super.onRenamed(item, oldName, newName);
		}
	}

	@Override
	public void onUpdated(Item item) {
		initPython();
		if (pexec.isImplemented(5)) {
			pexec.execPythonVoid("on_updated", item);
		} else {
			super.onUpdated(item);
		}
	}

	@Override
	public void onBeforeShutdown() {
		initPython();
		if (pexec.isImplemented(6)) {
			pexec.execPythonVoid("on_before_shutdown");
		} else {
			super.onBeforeShutdown();
		}
	}

	@Override
	public void register() {
		initPython();
		if (pexec.isImplemented(7)) {
			pexec.execPythonVoid("register");
		} else {
			super.register();
		}
	}

	public void superOnCreated(Item item) {
		super.onCreated(item);
	}

	public void superOnCopied(Item src, Item item) {
		super.onCopied(src, item);
	}

	public void superOnLoaded() {
		super.onLoaded();
	}

	public void superOnDeleted(Item item) {
		super.onDeleted(item);
	}

	public void superOnRenamed(Item item, String oldName, String newName) {
		super.onRenamed(item, oldName, newName);
	}

	public void superOnUpdated(Item item) {
		super.onUpdated(item);
	}

	public void superOnBeforeShutdown() {
		super.onBeforeShutdown();
	}

	public void superRegister() {
		super.register();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
