package jenkins.python.expoint;


import hudson.ExtensionPoint;
import hudson.model.Action;
import hudson.model.Fingerprint;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import java.util.List;
import jenkins.model.*;
import jenkins.model.FingerprintFacet.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see jenkins.model.FingerprintFacet
 */
public abstract class FingerprintFacetPW extends FingerprintFacet {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[0];
			String[] pFuncs = new String[0];
			Class[][] argTypes = new Class[0][];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[4];
			functions[0] = "get_fingerprint";
			functions[1] = "create_actions";
			functions[2] = "get_timestamp";
			functions[3] = "_set_owner";
			int[] argsCount = new int[4];
			argsCount[0] = 0;
			argsCount[1] = 1;
			argsCount[2] = 0;
			argsCount[3] = 1;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	public FingerprintFacetPW(Fingerprint fingerprint, long timestamp) {
		super(fingerprint, timestamp);
	}

	@Override
	public Fingerprint getFingerprint() {
		initPython();
		if (pexec.isImplemented(0)) {
			return (Fingerprint) pexec.execPython("get_fingerprint");
		} else {
			return super.getFingerprint();
		}
	}

	@Override
	public void createActions(List<Action> result) {
		initPython();
		if (pexec.isImplemented(1)) {
			pexec.execPythonVoid("create_actions", result);
		} else {
			super.createActions(result);
		}
	}

	@Override
	public long getTimestamp() {
		initPython();
		if (pexec.isImplemented(2)) {
			return pexec.execPythonLong("get_timestamp");
		} else {
			return super.getTimestamp();
		}
	}

	@Override
	public void _setOwner(Fingerprint fingerprint) {
		initPython();
		pexec.execPythonVoid("_set_owner", fingerprint);
	}

	public Fingerprint superGetFingerprint() {
		return super.getFingerprint();
	}

	public void superCreateActions(List<Action> result) {
		super.createActions(result);
	}

	public long superGetTimestamp() {
		return super.getTimestamp();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
