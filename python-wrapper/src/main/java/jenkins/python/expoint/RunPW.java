package jenkins.python.expoint;


import hudson.console.ConsoleLogFilter;
import hudson.Functions;
import hudson.AbortException;
import hudson.BulkChange;
import hudson.EnvVars;
import hudson.ExtensionPoint;
import hudson.FeedAdapter;
import hudson.FilePath;
import hudson.Util;
import hudson.XmlFile;
import hudson.cli.declarative.CLIMethod;
import hudson.console.AnnotatedLargeText;
import hudson.console.ConsoleNote;
import hudson.matrix.MatrixBuild;
import hudson.matrix.MatrixRun;
import hudson.model.Descriptor.FormException;
import hudson.model.listeners.RunListener;
import hudson.model.listeners.SaveableListener;
import hudson.security.PermissionScope;
import hudson.search.SearchIndexBuilder;
import hudson.security.ACL;
import hudson.security.AccessControlled;
import hudson.security.Permission;
import hudson.security.PermissionGroup;
import hudson.tasks.BuildWrapper;
import hudson.tasks.BuildStep;
import hudson.tasks.test.AbstractTestResultAction;
import hudson.util.FlushProofOutputStream;
import hudson.util.FormApply;
import hudson.util.IOException2;
import hudson.util.LogTaskListener;
import hudson.util.XStream2;
import hudson.util.ProcessTree;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.jcraft.jzlib.GZIPInputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletResponse;
import jenkins.model.BuildDiscarder;
import jenkins.model.Jenkins;
import jenkins.model.JenkinsLocationConfiguration;
import jenkins.util.io.OnMaster;
import net.sf.json.JSONObject;
import org.apache.commons.io.IOUtils;
import org.apache.commons.jelly.XMLOutput;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.*;
import org.kohsuke.stapler.export.Exported;
import org.kohsuke.stapler.export.ExportedBean;
import com.thoughtworks.xstream.XStream;
import hudson.model.Run.RunExecution;
import java.io.ByteArrayInputStream;
import org.kohsuke.stapler.interceptor.RequirePOST;
import java.io.FileOutputStream;
import java.io.OutputStream;
import static java.util.logging.Level.*;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import jenkins.model.PeepholePermalink;
import jenkins.model.RunAction2;
import hudson.model.*;
import hudson.model.Run.*;
import hudson.model.queue.Tasks;
import jenkins.model.ModelObjectWithContextMenu;
import org.apache.commons.jelly.JellyContext;
import org.apache.commons.jelly.JellyException;
import org.apache.commons.jelly.JellyTagException;
import org.apache.commons.jelly.Script;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.StaplerResponse;
import org.kohsuke.stapler.WebApp;
import org.kohsuke.stapler.jelly.JellyClassTearOff;
import org.kohsuke.stapler.jelly.JellyFacet;
import org.xml.sax.helpers.DefaultHandler;
import java.util.Vector;
import java.util.concurrent.CopyOnWriteArrayList;
import hudson.model.Actionable.*;
import hudson.search.SearchFactory;
import org.kohsuke.stapler.Stapler;
import hudson.search.SearchableModelObject;
import hudson.search.Search;
import hudson.search.SearchIndex;
import hudson.model.AbstractModelObject.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.model.Run
 */
public abstract class RunPW<JobT extends Job<JobT, RunT>, RunT extends Run<JobT, RunT>> extends Run<JobT, RunT> {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[0];
			String[] pFuncs = new String[0];
			Class[][] argTypes = new Class[0][];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[93];
			functions[0] = "reload";
			functions[1] = "on_load";
			functions[2] = "get_transient_actions";
			functions[3] = "add_action";
			functions[4] = "_this";
			functions[5] = "compare_to";
			functions[6] = "get_result";
			functions[7] = "set_result";
			functions[8] = "get_badge_actions";
			functions[9] = "is_building";
			functions[10] = "is_log_updated";
			functions[11] = "get_executor";
			functions[12] = "get_one_off_executor";
			functions[13] = "get_causes";
			functions[14] = "get_cause";
			functions[15] = "get_why_keep_log";
			functions[16] = "get_parent";
			functions[17] = "get_timestamp";
			functions[18] = "get_description";
			functions[19] = "get_truncated_description";
			functions[20] = "get_timestamp_string";
			functions[21] = "get_timestamp_string2";
			functions[22] = "get_duration_string";
			functions[23] = "get_duration";
			functions[24] = "get_icon_color";
			functions[25] = "hasnt_started_yet";
			functions[26] = "to_string";
			functions[27] = "get_full_display_name";
			functions[28] = "get_display_name";
			functions[29] = "has_custom_display_name";
			functions[30] = "set_display_name";
			functions[31] = "get_number";
			functions[32] = "get_previous_build";
			functions[33] = "get_previous_built_build";
			functions[34] = "get_previous_not_failed_build";
			functions[35] = "get_previous_failed_build";
			functions[36] = "get_previous_successful_build";
			functions[37] = "get_previous_builds_over_threshold";
			functions[38] = "get_next_build";
			functions[39] = "get_url";
			functions[40] = "get_id";
			functions[41] = "get_descriptor_by_name";
			functions[42] = "get_root_dir";
			functions[43] = "get_artifacts_dir";
			functions[44] = "get_artifacts";
			functions[45] = "get_artifacts_up_to";
			functions[46] = "get_has_artifacts";
			functions[47] = "get_log_file";
			functions[48] = "get_log_input_stream";
			functions[49] = "get_log_reader";
			functions[50] = "write_log_to";
			functions[51] = "write_whole_log_to";
			functions[52] = "get_log_text";
			functions[53] = "make_search_index";
			functions[54] = "get_api";
			functions[55] = "check_permission";
			functions[56] = "has_permission";
			functions[57] = "get_acl";
			functions[58] = "delete_artifacts";
			functions[59] = "delete";
			functions[60] = "on_start_building";
			functions[61] = "on_end_building";
			functions[62] = "save";
			functions[63] = "get_log";
			functions[64] = "do_build_status";
			functions[65] = "get_build_status_url";
			functions[66] = "get_build_status_summary";
			functions[67] = "do_artifact";
			functions[68] = "do_build_number";
			functions[69] = "do_build_timestamp";
			functions[70] = "do_console_text";
			functions[71] = "do_progressive_log";
			functions[72] = "can_toggle_log_keep";
			functions[73] = "do_toggle_log_keep";
			functions[74] = "keep_log";
			functions[75] = "do_do_delete";
			functions[76] = "set_description";
			functions[77] = "do_submit_description";
			functions[78] = "get_env_vars";
			functions[79] = "get_environment";
			functions[80] = "get_environment";
			functions[81] = "get_externalizable_id";
			functions[82] = "get_estimated_duration";
			functions[83] = "do_config_submit";
			functions[84] = "submit";
			functions[85] = "get_dynamic";
			functions[86] = "get_actions";
			functions[87] = "get_actions";
			functions[88] = "get_action";
			functions[89] = "get_action";
			functions[90] = "do_context_menu";
			functions[91] = "get_search";
			functions[92] = "get_search_name";
			int[] argsCount = new int[93];
			argsCount[0] = 0;
			argsCount[1] = 0;
			argsCount[2] = 0;
			argsCount[3] = 1;
			argsCount[4] = 0;
			argsCount[5] = 1;
			argsCount[6] = 0;
			argsCount[7] = 1;
			argsCount[8] = 0;
			argsCount[9] = 0;
			argsCount[10] = 0;
			argsCount[11] = 0;
			argsCount[12] = 0;
			argsCount[13] = 0;
			argsCount[14] = 1;
			argsCount[15] = 0;
			argsCount[16] = 0;
			argsCount[17] = 0;
			argsCount[18] = 0;
			argsCount[19] = 0;
			argsCount[20] = 0;
			argsCount[21] = 0;
			argsCount[22] = 0;
			argsCount[23] = 0;
			argsCount[24] = 0;
			argsCount[25] = 0;
			argsCount[26] = 0;
			argsCount[27] = 0;
			argsCount[28] = 0;
			argsCount[29] = 0;
			argsCount[30] = 1;
			argsCount[31] = 0;
			argsCount[32] = 0;
			argsCount[33] = 0;
			argsCount[34] = 0;
			argsCount[35] = 0;
			argsCount[36] = 0;
			argsCount[37] = 2;
			argsCount[38] = 0;
			argsCount[39] = 0;
			argsCount[40] = 0;
			argsCount[41] = 1;
			argsCount[42] = 0;
			argsCount[43] = 0;
			argsCount[44] = 0;
			argsCount[45] = 1;
			argsCount[46] = 0;
			argsCount[47] = 0;
			argsCount[48] = 0;
			argsCount[49] = 0;
			argsCount[50] = 2;
			argsCount[51] = 1;
			argsCount[52] = 0;
			argsCount[53] = 0;
			argsCount[54] = 0;
			argsCount[55] = 1;
			argsCount[56] = 1;
			argsCount[57] = 0;
			argsCount[58] = 0;
			argsCount[59] = 0;
			argsCount[60] = 0;
			argsCount[61] = 0;
			argsCount[62] = 0;
			argsCount[63] = 1;
			argsCount[64] = 2;
			argsCount[65] = 0;
			argsCount[66] = 0;
			argsCount[67] = 0;
			argsCount[68] = 1;
			argsCount[69] = 3;
			argsCount[70] = 2;
			argsCount[71] = 2;
			argsCount[72] = 0;
			argsCount[73] = 2;
			argsCount[74] = 1;
			argsCount[75] = 2;
			argsCount[76] = 1;
			argsCount[77] = 2;
			argsCount[78] = 0;
			argsCount[79] = 0;
			argsCount[80] = 1;
			argsCount[81] = 0;
			argsCount[82] = 0;
			argsCount[83] = 1;
			argsCount[84] = 1;
			argsCount[85] = 3;
			argsCount[86] = 0;
			argsCount[87] = 1;
			argsCount[88] = 1;
			argsCount[89] = 1;
			argsCount[90] = 2;
			argsCount[91] = 0;
			argsCount[92] = 0;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	public RunPW(JobT job) throws IOException {
		super(job);
	}

	public RunPW(JobT job, Calendar timestamp) {
		super(job, timestamp);
	}

	public RunPW(JobT job, long timestamp) {
		super(job, timestamp);
	}

	public RunPW(JobT project, File buildDir) throws IOException {
		super(project, buildDir);
	}

	@Override
	public void reload() throws IOException {
		initPython();
		if (pexec.isImplemented(0)) {
			pexec.execPythonVoid("reload");
		} else {
			super.reload();
		}
	}

	@Override
	public @SuppressWarnings("deprecation")
	void onLoad() {
		initPython();
		if (pexec.isImplemented(1)) {
			pexec.execPythonVoid("on_load");
		} else {
			super.onLoad();
		}
	}

	@Override
	public List<Action> getTransientActions() {
		initPython();
		if (pexec.isImplemented(2)) {
			return (List) pexec.execPython("get_transient_actions");
		} else {
			return super.getTransientActions();
		}
	}

	@SuppressWarnings("deprecation")
	@Override
	public void addAction(Action a) {
		initPython();
		if (pexec.isImplemented(3)) {
			pexec.execPythonVoid("add_action", a);
		} else {
			super.addAction(a);
		}
	}

	@Override
	public @SuppressWarnings({"unchecked"})
	RunT _this() {
		initPython();
		if (pexec.isImplemented(4)) {
			return (RunT) pexec.execPython("_this");
		} else {
			return super._this();
		}
	}

	@Override
	public int compareTo(RunT that) {
		initPython();
		if (pexec.isImplemented(5)) {
			return pexec.execPythonInt("compare_to", that);
		} else {
			return super.compareTo(that);
		}
	}

	@Override
	@Exported
	public Result getResult() {
		initPython();
		if (pexec.isImplemented(6)) {
			return (Result) pexec.execPython("get_result");
		} else {
			return super.getResult();
		}
	}

	@Override
	public void setResult(Result r) {
		initPython();
		if (pexec.isImplemented(7)) {
			pexec.execPythonVoid("set_result", r);
		} else {
			super.setResult(r);
		}
	}

	@Override
	public List<BuildBadgeAction> getBadgeActions() {
		initPython();
		if (pexec.isImplemented(8)) {
			return (List) pexec.execPython("get_badge_actions");
		} else {
			return super.getBadgeActions();
		}
	}

	@Override
	@Exported
	public boolean isBuilding() {
		initPython();
		if (pexec.isImplemented(9)) {
			return pexec.execPythonBool("is_building");
		} else {
			return super.isBuilding();
		}
	}

	@Override
	public boolean isLogUpdated() {
		initPython();
		if (pexec.isImplemented(10)) {
			return pexec.execPythonBool("is_log_updated");
		} else {
			return super.isLogUpdated();
		}
	}

	@Override
	@Exported
	public @CheckForNull
	Executor getExecutor() {
		initPython();
		if (pexec.isImplemented(11)) {
			return (Executor) pexec.execPython("get_executor");
		} else {
			return super.getExecutor();
		}
	}

	@Override
	public Executor getOneOffExecutor() {
		initPython();
		if (pexec.isImplemented(12)) {
			return (Executor) pexec.execPython("get_one_off_executor");
		} else {
			return super.getOneOffExecutor();
		}
	}

	@Override
	public List<Cause> getCauses() {
		initPython();
		if (pexec.isImplemented(13)) {
			return (List) pexec.execPython("get_causes");
		} else {
			return super.getCauses();
		}
	}

	@Override
	public <T extends Cause> T getCause(Class<T> type) {
		initPython();
		if (pexec.isImplemented(14)) {
			return (T) pexec.execPython("get_cause", type);
		} else {
			return super.getCause(type);
		}
	}

	@Override
	public String getWhyKeepLog() {
		initPython();
		if (pexec.isImplemented(15)) {
			return (String) pexec.execPython("get_why_keep_log");
		} else {
			return super.getWhyKeepLog();
		}
	}

	@Override
	public JobT getParent() {
		initPython();
		if (pexec.isImplemented(16)) {
			return (JobT) pexec.execPython("get_parent");
		} else {
			return super.getParent();
		}
	}

	@Override
	@Exported
	public Calendar getTimestamp() {
		initPython();
		if (pexec.isImplemented(17)) {
			return (Calendar) pexec.execPython("get_timestamp");
		} else {
			return super.getTimestamp();
		}
	}

	@Override
	@Exported
	public String getDescription() {
		initPython();
		if (pexec.isImplemented(18)) {
			return (String) pexec.execPython("get_description");
		} else {
			return super.getDescription();
		}
	}

	@Override
	public String getTruncatedDescription() {
		initPython();
		if (pexec.isImplemented(19)) {
			return (String) pexec.execPython("get_truncated_description");
		} else {
			return super.getTruncatedDescription();
		}
	}

	@Override
	public String getTimestampString() {
		initPython();
		if (pexec.isImplemented(20)) {
			return (String) pexec.execPython("get_timestamp_string");
		} else {
			return super.getTimestampString();
		}
	}

	@Override
	public String getTimestampString2() {
		initPython();
		if (pexec.isImplemented(21)) {
			return (String) pexec.execPython("get_timestamp_string2");
		} else {
			return super.getTimestampString2();
		}
	}

	@Override
	public String getDurationString() {
		initPython();
		if (pexec.isImplemented(22)) {
			return (String) pexec.execPython("get_duration_string");
		} else {
			return super.getDurationString();
		}
	}

	@Override
	@Exported
	public long getDuration() {
		initPython();
		if (pexec.isImplemented(23)) {
			return pexec.execPythonLong("get_duration");
		} else {
			return super.getDuration();
		}
	}

	@Override
	public BallColor getIconColor() {
		initPython();
		if (pexec.isImplemented(24)) {
			return (BallColor) pexec.execPython("get_icon_color");
		} else {
			return super.getIconColor();
		}
	}

	@Override
	public boolean hasntStartedYet() {
		initPython();
		if (pexec.isImplemented(25)) {
			return pexec.execPythonBool("hasnt_started_yet");
		} else {
			return super.hasntStartedYet();
		}
	}

	@Override
	public String toString() {
		initPython();
		if (pexec.isImplemented(26)) {
			return (String) pexec.execPython("to_string");
		} else {
			return super.toString();
		}
	}

	@Override
	@Exported
	public String getFullDisplayName() {
		initPython();
		if (pexec.isImplemented(27)) {
			return (String) pexec.execPython("get_full_display_name");
		} else {
			return super.getFullDisplayName();
		}
	}

	@Override
	public String getDisplayName() {
		initPython();
		if (pexec.isImplemented(28)) {
			return (String) pexec.execPython("get_display_name");
		} else {
			return super.getDisplayName();
		}
	}

	@Override
	public boolean hasCustomDisplayName() {
		initPython();
		if (pexec.isImplemented(29)) {
			return pexec.execPythonBool("has_custom_display_name");
		} else {
			return super.hasCustomDisplayName();
		}
	}

	@Override
	public void setDisplayName(String value) throws IOException {
		initPython();
		if (pexec.isImplemented(30)) {
			pexec.execPythonVoid("set_display_name", value);
		} else {
			super.setDisplayName(value);
		}
	}

	@Override
	@Exported(visibility = 2)
	public int getNumber() {
		initPython();
		if (pexec.isImplemented(31)) {
			return pexec.execPythonInt("get_number");
		} else {
			return super.getNumber();
		}
	}

	@Override
	public RunT getPreviousBuild() {
		initPython();
		if (pexec.isImplemented(32)) {
			return (RunT) pexec.execPython("get_previous_build");
		} else {
			return super.getPreviousBuild();
		}
	}

	@Override
	public RunT getPreviousBuiltBuild() {
		initPython();
		if (pexec.isImplemented(33)) {
			return (RunT) pexec.execPython("get_previous_built_build");
		} else {
			return super.getPreviousBuiltBuild();
		}
	}

	@Override
	public RunT getPreviousNotFailedBuild() {
		initPython();
		if (pexec.isImplemented(34)) {
			return (RunT) pexec.execPython("get_previous_not_failed_build");
		} else {
			return super.getPreviousNotFailedBuild();
		}
	}

	@Override
	public RunT getPreviousFailedBuild() {
		initPython();
		if (pexec.isImplemented(35)) {
			return (RunT) pexec.execPython("get_previous_failed_build");
		} else {
			return super.getPreviousFailedBuild();
		}
	}

	@Override
	public RunT getPreviousSuccessfulBuild() {
		initPython();
		if (pexec.isImplemented(36)) {
			return (RunT) pexec.execPython("get_previous_successful_build");
		} else {
			return super.getPreviousSuccessfulBuild();
		}
	}

	@Override
	public List<RunT> getPreviousBuildsOverThreshold(int numberOfBuilds, Result threshold) {
		initPython();
		if (pexec.isImplemented(37)) {
			return (List) pexec.execPython("get_previous_builds_over_threshold", DataConvertor.fromInt(numberOfBuilds), threshold);
		} else {
			return super.getPreviousBuildsOverThreshold(numberOfBuilds, threshold);
		}
	}

	@Override
	public RunT getNextBuild() {
		initPython();
		if (pexec.isImplemented(38)) {
			return (RunT) pexec.execPython("get_next_build");
		} else {
			return super.getNextBuild();
		}
	}

	@Override
	public String getUrl() {
		initPython();
		if (pexec.isImplemented(39)) {
			return (String) pexec.execPython("get_url");
		} else {
			return super.getUrl();
		}
	}

	@Override
	@Exported
	public String getId() {
		initPython();
		if (pexec.isImplemented(40)) {
			return (String) pexec.execPython("get_id");
		} else {
			return super.getId();
		}
	}

	@Override
	public Descriptor getDescriptorByName(String className) {
		initPython();
		if (pexec.isImplemented(41)) {
			return (Descriptor) pexec.execPython("get_descriptor_by_name", className);
		} else {
			return super.getDescriptorByName(className);
		}
	}

	@Override
	public File getRootDir() {
		initPython();
		if (pexec.isImplemented(42)) {
			return (File) pexec.execPython("get_root_dir");
		} else {
			return super.getRootDir();
		}
	}

	@Override
	public File getArtifactsDir() {
		initPython();
		if (pexec.isImplemented(43)) {
			return (File) pexec.execPython("get_artifacts_dir");
		} else {
			return super.getArtifactsDir();
		}
	}

	@Override
	@Exported
	public List<Artifact> getArtifacts() {
		initPython();
		if (pexec.isImplemented(44)) {
			return (List) pexec.execPython("get_artifacts");
		} else {
			return super.getArtifacts();
		}
	}

	@Override
	public List<Artifact> getArtifactsUpTo(int n) {
		initPython();
		if (pexec.isImplemented(45)) {
			return (List) pexec.execPython("get_artifacts_up_to", DataConvertor.fromInt(n));
		} else {
			return super.getArtifactsUpTo(n);
		}
	}

	@Override
	public boolean getHasArtifacts() {
		initPython();
		if (pexec.isImplemented(46)) {
			return pexec.execPythonBool("get_has_artifacts");
		} else {
			return super.getHasArtifacts();
		}
	}

	@Override
	public File getLogFile() {
		initPython();
		if (pexec.isImplemented(47)) {
			return (File) pexec.execPython("get_log_file");
		} else {
			return super.getLogFile();
		}
	}

	@Override
	public InputStream getLogInputStream() throws IOException {
		initPython();
		if (pexec.isImplemented(48)) {
			return (InputStream) pexec.execPython("get_log_input_stream");
		} else {
			return super.getLogInputStream();
		}
	}

	@Override
	public Reader getLogReader() throws IOException {
		initPython();
		if (pexec.isImplemented(49)) {
			return (Reader) pexec.execPython("get_log_reader");
		} else {
			return super.getLogReader();
		}
	}

	@Override
	public void writeLogTo(long offset, XMLOutput out) throws IOException {
		initPython();
		if (pexec.isImplemented(50)) {
			pexec.execPythonVoid("write_log_to", DataConvertor.fromLong(offset), out);
		} else {
			super.writeLogTo(offset, out);
		}
	}

	@Override
	public void writeWholeLogTo(OutputStream out) throws IOException, InterruptedException {
		initPython();
		if (pexec.isImplemented(51)) {
			pexec.execPythonVoid("write_whole_log_to", out);
		} else {
			super.writeWholeLogTo(out);
		}
	}

	@Override
	public AnnotatedLargeText getLogText() {
		initPython();
		if (pexec.isImplemented(52)) {
			return (AnnotatedLargeText) pexec.execPython("get_log_text");
		} else {
			return super.getLogText();
		}
	}

	public @Override
	SearchIndexBuilder makeSearchIndex() {
		initPython();
		if (pexec.isImplemented(53)) {
			return (SearchIndexBuilder) pexec.execPython("make_search_index");
		} else {
			return super.makeSearchIndex();
		}
	}

	@Override
	public Api getApi() {
		initPython();
		if (pexec.isImplemented(54)) {
			return (Api) pexec.execPython("get_api");
		} else {
			return super.getApi();
		}
	}

	@Override
	public void checkPermission(Permission p) {
		initPython();
		if (pexec.isImplemented(55)) {
			pexec.execPythonVoid("check_permission", p);
		} else {
			super.checkPermission(p);
		}
	}

	@Override
	public boolean hasPermission(Permission p) {
		initPython();
		if (pexec.isImplemented(56)) {
			return pexec.execPythonBool("has_permission", p);
		} else {
			return super.hasPermission(p);
		}
	}

	@Override
	public ACL getACL() {
		initPython();
		if (pexec.isImplemented(57)) {
			return (ACL) pexec.execPython("get_acl");
		} else {
			return super.getACL();
		}
	}

	@Override
	public synchronized void deleteArtifacts() throws IOException {
		initPython();
		if (pexec.isImplemented(58)) {
			pexec.execPythonVoid("delete_artifacts");
		} else {
			super.deleteArtifacts();
		}
	}

	@Override
	public synchronized void delete() throws IOException {
		initPython();
		if (pexec.isImplemented(59)) {
			pexec.execPythonVoid("delete");
		} else {
			super.delete();
		}
	}

	@Override
	public void onStartBuilding() {
		initPython();
		if (pexec.isImplemented(60)) {
			pexec.execPythonVoid("on_start_building");
		} else {
			super.onStartBuilding();
		}
	}

	@Override
	public void onEndBuilding() {
		initPython();
		if (pexec.isImplemented(61)) {
			pexec.execPythonVoid("on_end_building");
		} else {
			super.onEndBuilding();
		}
	}

	@Override
	public synchronized void save() throws IOException {
		initPython();
		if (pexec.isImplemented(62)) {
			pexec.execPythonVoid("save");
		} else {
			super.save();
		}
	}

	@Override
	public List<String> getLog(int maxLines) throws IOException {
		initPython();
		if (pexec.isImplemented(63)) {
			return (List) pexec.execPython("get_log", DataConvertor.fromInt(maxLines));
		} else {
			return super.getLog(maxLines);
		}
	}

	@Override
	public void doBuildStatus(StaplerRequest req, StaplerResponse rsp) throws IOException {
		initPython();
		if (pexec.isImplemented(64)) {
			pexec.execPythonVoid("do_build_status", req, rsp);
		} else {
			super.doBuildStatus(req, rsp);
		}
	}

	@Override
	public String getBuildStatusUrl() {
		initPython();
		if (pexec.isImplemented(65)) {
			return (String) pexec.execPython("get_build_status_url");
		} else {
			return super.getBuildStatusUrl();
		}
	}

	@Override
	public Summary getBuildStatusSummary() {
		initPython();
		if (pexec.isImplemented(66)) {
			return (Summary) pexec.execPython("get_build_status_summary");
		} else {
			return super.getBuildStatusSummary();
		}
	}

	@Override
	public DirectoryBrowserSupport doArtifact() {
		initPython();
		if (pexec.isImplemented(67)) {
			return (DirectoryBrowserSupport) pexec.execPython("do_artifact");
		} else {
			return super.doArtifact();
		}
	}

	@Override
	public void doBuildNumber(StaplerResponse rsp) throws IOException {
		initPython();
		if (pexec.isImplemented(68)) {
			pexec.execPythonVoid("do_build_number", rsp);
		} else {
			super.doBuildNumber(rsp);
		}
	}

	@Override
	public void doBuildTimestamp(StaplerRequest req, StaplerResponse rsp, @QueryParameter String format) throws IOException {
		initPython();
		if (pexec.isImplemented(69)) {
			pexec.execPythonVoid("do_build_timestamp", req, rsp, format);
		} else {
			super.doBuildTimestamp(req, rsp, format);
		}
	}

	@Override
	public void doConsoleText(StaplerRequest req, StaplerResponse rsp) throws IOException {
		initPython();
		if (pexec.isImplemented(70)) {
			pexec.execPythonVoid("do_console_text", req, rsp);
		} else {
			super.doConsoleText(req, rsp);
		}
	}

	@Override
	public void doProgressiveLog(StaplerRequest req, StaplerResponse rsp) throws IOException {
		initPython();
		if (pexec.isImplemented(71)) {
			pexec.execPythonVoid("do_progressive_log", req, rsp);
		} else {
			super.doProgressiveLog(req, rsp);
		}
	}

	@Override
	public boolean canToggleLogKeep() {
		initPython();
		if (pexec.isImplemented(72)) {
			return pexec.execPythonBool("can_toggle_log_keep");
		} else {
			return super.canToggleLogKeep();
		}
	}

	@Override
	public void doToggleLogKeep(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
		initPython();
		if (pexec.isImplemented(73)) {
			pexec.execPythonVoid("do_toggle_log_keep", req, rsp);
		} else {
			super.doToggleLogKeep(req, rsp);
		}
	}

	@Override
	public void keepLog(boolean newValue) throws IOException {
		initPython();
		if (pexec.isImplemented(74)) {
			pexec.execPythonVoid("keep_log", DataConvertor.fromBool(newValue));
		} else {
			super.keepLog(newValue);
		}
	}

	@Override
	@RequirePOST
	public void doDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
		initPython();
		if (pexec.isImplemented(75)) {
			pexec.execPythonVoid("do_do_delete", req, rsp);
		} else {
			super.doDoDelete(req, rsp);
		}
	}

	@Override
	public void setDescription(String description) throws IOException {
		initPython();
		if (pexec.isImplemented(76)) {
			pexec.execPythonVoid("set_description", description);
		} else {
			super.setDescription(description);
		}
	}

	@Override
	public synchronized void doSubmitDescription(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
		initPython();
		if (pexec.isImplemented(77)) {
			pexec.execPythonVoid("do_submit_description", req, rsp);
		} else {
			super.doSubmitDescription(req, rsp);
		}
	}

	@Override
	public Map<String, String> getEnvVars() {
		initPython();
		if (pexec.isImplemented(78)) {
			return (Map) pexec.execPython("get_env_vars");
		} else {
			return super.getEnvVars();
		}
	}

	@Override
	public EnvVars getEnvironment() throws IOException, InterruptedException {
		initPython();
		if (pexec.isImplemented(79)) {
			return (EnvVars) pexec.execPython("get_environment");
		} else {
			return super.getEnvironment();
		}
	}

	@Override
	public EnvVars getEnvironment(TaskListener listener) throws IOException, InterruptedException {
		initPython();
		if (pexec.isImplemented(80)) {
			return (EnvVars) pexec.execPython("get_environment", listener);
		} else {
			return super.getEnvironment(listener);
		}
	}

	@Override
	public String getExternalizableId() {
		initPython();
		if (pexec.isImplemented(81)) {
			return (String) pexec.execPython("get_externalizable_id");
		} else {
			return super.getExternalizableId();
		}
	}

	@Override
	@Exported
	public long getEstimatedDuration() {
		initPython();
		if (pexec.isImplemented(82)) {
			return pexec.execPythonLong("get_estimated_duration");
		} else {
			return super.getEstimatedDuration();
		}
	}

	@Override
	@RequirePOST
	public HttpResponse doConfigSubmit(StaplerRequest req) throws IOException, ServletException, FormException {
		initPython();
		if (pexec.isImplemented(83)) {
			return (HttpResponse) pexec.execPython("do_config_submit", req);
		} else {
			return super.doConfigSubmit(req);
		}
	}

	@Override
	public void submit(JSONObject json) throws IOException {
		initPython();
		if (pexec.isImplemented(84)) {
			pexec.execPythonVoid("submit", json);
		} else {
			super.submit(json);
		}
	}

	@Override
	public Object getDynamic(String token, StaplerRequest req, StaplerResponse rsp) {
		initPython();
		if (pexec.isImplemented(85)) {
			return (Object) pexec.execPython("get_dynamic", token, req, rsp);
		} else {
			return super.getDynamic(token, req, rsp);
		}
	}

	@Override
	@Exported
	public List<Action> getActions() {
		initPython();
		if (pexec.isImplemented(86)) {
			return (List) pexec.execPython("get_actions");
		} else {
			return super.getActions();
		}
	}

	@Override
	public <T extends Action> List<T> getActions(Class<T> type) {
		initPython();
		if (pexec.isImplemented(87)) {
			return (List) pexec.execPython("get_actions", type);
		} else {
			return super.getActions(type);
		}
	}

	@Override
	public Action getAction(int index) {
		initPython();
		if (pexec.isImplemented(88)) {
			return (Action) pexec.execPython("get_action", DataConvertor.fromInt(index));
		} else {
			return super.getAction(index);
		}
	}

	@Override
	public <T extends Action> T getAction(Class<T> type) {
		initPython();
		if (pexec.isImplemented(89)) {
			return (T) pexec.execPython("get_action", type);
		} else {
			return super.getAction(type);
		}
	}

	@Override
	public ContextMenu doContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {
		initPython();
		if (pexec.isImplemented(90)) {
			return (ContextMenu) pexec.execPython("do_context_menu", request, response);
		} else {
			return super.doContextMenu(request, response);
		}
	}

	@Override
	public Search getSearch() {
		initPython();
		if (pexec.isImplemented(91)) {
			return (Search) pexec.execPython("get_search");
		} else {
			return super.getSearch();
		}
	}

	@Override
	public String getSearchName() {
		initPython();
		if (pexec.isImplemented(92)) {
			return (String) pexec.execPython("get_search_name");
		} else {
			return super.getSearchName();
		}
	}

	public void superReload() throws IOException {
		super.reload();
	}

	public void superOnLoad() {
		super.onLoad();
	}

	public List<Action> superGetTransientActions() {
		return super.getTransientActions();
	}

	public void superAddAction(Action a) {
		super.addAction(a);
	}

	public RunT super_this() {
		return super._this();
	}

	public int superCompareTo(RunT that) {
		return super.compareTo(that);
	}

	public Result superGetResult() {
		return super.getResult();
	}

	public void superSetResult(Result r) {
		super.setResult(r);
	}

	public List<BuildBadgeAction> superGetBadgeActions() {
		return super.getBadgeActions();
	}

	public boolean superIsBuilding() {
		return super.isBuilding();
	}

	public boolean superIsLogUpdated() {
		return super.isLogUpdated();
	}

	public Executor superGetExecutor() {
		return super.getExecutor();
	}

	public Executor superGetOneOffExecutor() {
		return super.getOneOffExecutor();
	}

	public List<Cause> superGetCauses() {
		return super.getCauses();
	}

	public <T extends Cause> T superGetCause(Class<T> type) {
		return super.getCause(type);
	}

	public String superGetWhyKeepLog() {
		return super.getWhyKeepLog();
	}

	public JobT superGetParent() {
		return super.getParent();
	}

	public Calendar superGetTimestamp() {
		return super.getTimestamp();
	}

	public String superGetDescription() {
		return super.getDescription();
	}

	public String superGetTruncatedDescription() {
		return super.getTruncatedDescription();
	}

	public String superGetTimestampString() {
		return super.getTimestampString();
	}

	public String superGetTimestampString2() {
		return super.getTimestampString2();
	}

	public String superGetDurationString() {
		return super.getDurationString();
	}

	public long superGetDuration() {
		return super.getDuration();
	}

	public BallColor superGetIconColor() {
		return super.getIconColor();
	}

	public boolean superHasntStartedYet() {
		return super.hasntStartedYet();
	}

	public String superToString() {
		return super.toString();
	}

	public String superGetFullDisplayName() {
		return super.getFullDisplayName();
	}

	public String superGetDisplayName() {
		return super.getDisplayName();
	}

	public boolean superHasCustomDisplayName() {
		return super.hasCustomDisplayName();
	}

	public void superSetDisplayName(String value) throws IOException {
		super.setDisplayName(value);
	}

	public int superGetNumber() {
		return super.getNumber();
	}

	public RunT superGetPreviousBuild() {
		return super.getPreviousBuild();
	}

	public RunT superGetPreviousBuiltBuild() {
		return super.getPreviousBuiltBuild();
	}

	public RunT superGetPreviousNotFailedBuild() {
		return super.getPreviousNotFailedBuild();
	}

	public RunT superGetPreviousFailedBuild() {
		return super.getPreviousFailedBuild();
	}

	public RunT superGetPreviousSuccessfulBuild() {
		return super.getPreviousSuccessfulBuild();
	}

	public List<RunT> superGetPreviousBuildsOverThreshold(int numberOfBuilds, Result threshold) {
		return super.getPreviousBuildsOverThreshold(numberOfBuilds, threshold);
	}

	public RunT superGetNextBuild() {
		return super.getNextBuild();
	}

	public String superGetUrl() {
		return super.getUrl();
	}

	public String superGetId() {
		return super.getId();
	}

	public Descriptor superGetDescriptorByName(String className) {
		return super.getDescriptorByName(className);
	}

	public File superGetRootDir() {
		return super.getRootDir();
	}

	public File superGetArtifactsDir() {
		return super.getArtifactsDir();
	}

	public List<Artifact> superGetArtifacts() {
		return super.getArtifacts();
	}

	public List<Artifact> superGetArtifactsUpTo(int n) {
		return super.getArtifactsUpTo(n);
	}

	public boolean superGetHasArtifacts() {
		return super.getHasArtifacts();
	}

	public File superGetLogFile() {
		return super.getLogFile();
	}

	public InputStream superGetLogInputStream() throws IOException {
		return super.getLogInputStream();
	}

	public Reader superGetLogReader() throws IOException {
		return super.getLogReader();
	}

	public void superWriteLogTo(long offset, XMLOutput out) throws IOException {
		super.writeLogTo(offset, out);
	}

	public void superWriteWholeLogTo(OutputStream out) throws IOException, InterruptedException {
		super.writeWholeLogTo(out);
	}

	public AnnotatedLargeText superGetLogText() {
		return super.getLogText();
	}

	public SearchIndexBuilder superMakeSearchIndex() {
		return super.makeSearchIndex();
	}

	public Api superGetApi() {
		return super.getApi();
	}

	public void superCheckPermission(Permission p) {
		super.checkPermission(p);
	}

	public boolean superHasPermission(Permission p) {
		return super.hasPermission(p);
	}

	public ACL superGetACL() {
		return super.getACL();
	}

	public synchronized void superDeleteArtifacts() throws IOException {
		super.deleteArtifacts();
	}

	public synchronized void superDelete() throws IOException {
		super.delete();
	}

	public void superOnStartBuilding() {
		super.onStartBuilding();
	}

	public void superOnEndBuilding() {
		super.onEndBuilding();
	}

	public synchronized void superSave() throws IOException {
		super.save();
	}

	public List<String> superGetLog(int maxLines) throws IOException {
		return super.getLog(maxLines);
	}

	public void superDoBuildStatus(StaplerRequest req, StaplerResponse rsp) throws IOException {
		super.doBuildStatus(req, rsp);
	}

	public String superGetBuildStatusUrl() {
		return super.getBuildStatusUrl();
	}

	public Summary superGetBuildStatusSummary() {
		return super.getBuildStatusSummary();
	}

	public DirectoryBrowserSupport superDoArtifact() {
		return super.doArtifact();
	}

	public void superDoBuildNumber(StaplerResponse rsp) throws IOException {
		super.doBuildNumber(rsp);
	}

	public void superDoBuildTimestamp(StaplerRequest req, StaplerResponse rsp, @QueryParameter String format) throws IOException {
		super.doBuildTimestamp(req, rsp, format);
	}

	public void superDoConsoleText(StaplerRequest req, StaplerResponse rsp) throws IOException {
		super.doConsoleText(req, rsp);
	}

	public void superDoProgressiveLog(StaplerRequest req, StaplerResponse rsp) throws IOException {
		super.doProgressiveLog(req, rsp);
	}

	public boolean superCanToggleLogKeep() {
		return super.canToggleLogKeep();
	}

	public void superDoToggleLogKeep(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
		super.doToggleLogKeep(req, rsp);
	}

	public void superKeepLog(boolean newValue) throws IOException {
		super.keepLog(newValue);
	}

	public void superDoDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
		super.doDoDelete(req, rsp);
	}

	public void superSetDescription(String description) throws IOException {
		super.setDescription(description);
	}

	public synchronized void superDoSubmitDescription(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {
		super.doSubmitDescription(req, rsp);
	}

	public Map<String, String> superGetEnvVars() {
		return super.getEnvVars();
	}

	public EnvVars superGetEnvironment() throws IOException, InterruptedException {
		return super.getEnvironment();
	}

	public EnvVars superGetEnvironment(TaskListener listener) throws IOException, InterruptedException {
		return super.getEnvironment(listener);
	}

	public String superGetExternalizableId() {
		return super.getExternalizableId();
	}

	public long superGetEstimatedDuration() {
		return super.getEstimatedDuration();
	}

	public HttpResponse superDoConfigSubmit(StaplerRequest req) throws IOException, ServletException, FormException {
		return super.doConfigSubmit(req);
	}

	public void superSubmit(JSONObject json) throws IOException {
		super.submit(json);
	}

	public Object superGetDynamic(String token, StaplerRequest req, StaplerResponse rsp) {
		return super.getDynamic(token, req, rsp);
	}

	public List<Action> superGetActions() {
		return super.getActions();
	}

	public <T extends Action> List<T> superGetActions(Class<T> type) {
		return super.getActions(type);
	}

	public Action superGetAction(int index) {
		return super.getAction(index);
	}

	public <T extends Action> T superGetAction(Class<T> type) {
		return super.getAction(type);
	}

	public ContextMenu superDoContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {
		return super.doContextMenu(request, response);
	}

	public Search superGetSearch() {
		return super.getSearch();
	}

	public String superGetSearchName() {
		return super.getSearchName();
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
