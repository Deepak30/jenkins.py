package jenkins.python.expoint;


import hudson.DescriptorExtensionList;
import hudson.ExtensionPoint;
import hudson.RestrictedSince;
import hudson.Util;
import hudson.matrix.MatrixBuild.MatrixBuildExecution;
import hudson.model.AbstractDescribableImpl;
import jenkins.model.Jenkins;
import hudson.util.QuotedStringTokenizer;
import org.kohsuke.accmod.Restricted;
import org.kohsuke.accmod.restrictions.NoExternalUse;
import org.kohsuke.stapler.StaplerRequest;
import org.kohsuke.stapler.DataBoundConstructor;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Arrays;
import java.util.Map;
import hudson.matrix.*;
import hudson.matrix.Axis.*;
import hudson.model.*;
import hudson.model.AbstractDescribableImpl.*;
import jenkins.python.DataConvertor;
import jenkins.python.PythonExecutor;

/**
 * This class was automatically generated by the PWM tool on 2014/03/21.
 * @see hudson.matrix.Axis
 */
public abstract class AxisPW extends Axis {
	private transient PythonExecutor pexec;

	private void initPython() {
		if (pexec == null) {
			pexec = new PythonExecutor(this);
			String[] jMethods = new String[0];
			String[] pFuncs = new String[0];
			Class[][] argTypes = new Class[0][];
			pexec.checkAbstrMethods(jMethods, pFuncs, argTypes);
			String[] functions = new String[14];
			functions[0] = "is_system";
			functions[1] = "iterator";
			functions[2] = "size";
			functions[3] = "value";
			functions[4] = "index_of";
			functions[5] = "compare_to";
			functions[6] = "get_name";
			functions[7] = "get_values";
			functions[8] = "rebuild";
			functions[9] = "get_descriptor";
			functions[10] = "to_string";
			functions[11] = "get_value_string";
			functions[12] = "read_resolve";
			functions[13] = "add_build_variable";
			int[] argsCount = new int[14];
			argsCount[0] = 0;
			argsCount[1] = 0;
			argsCount[2] = 0;
			argsCount[3] = 1;
			argsCount[4] = 1;
			argsCount[5] = 1;
			argsCount[6] = 0;
			argsCount[7] = 0;
			argsCount[8] = 1;
			argsCount[9] = 0;
			argsCount[10] = 0;
			argsCount[11] = 0;
			argsCount[12] = 0;
			argsCount[13] = 2;
			pexec.registerFunctions(functions, argsCount);
		}
	}

	public AxisPW(String name, List<String> values) {
		super(name, values);
	}

	public AxisPW(String name, String... values) {
		super(name, values);
	}

	@DataBoundConstructor
	public AxisPW(String name, String valueString) {
		super(name, valueString);
	}

	@Override
	public boolean isSystem() {
		initPython();
		if (pexec.isImplemented(0)) {
			return pexec.execPythonBool("is_system");
		} else {
			return super.isSystem();
		}
	}

	@Override
	public Iterator<String> iterator() {
		initPython();
		if (pexec.isImplemented(1)) {
			return (Iterator) pexec.execPython("iterator");
		} else {
			return super.iterator();
		}
	}

	@Override
	public int size() {
		initPython();
		if (pexec.isImplemented(2)) {
			return pexec.execPythonInt("size");
		} else {
			return super.size();
		}
	}

	@Override
	public String value(int index) {
		initPython();
		if (pexec.isImplemented(3)) {
			return (String) pexec.execPython("value", DataConvertor.fromInt(index));
		} else {
			return super.value(index);
		}
	}

	@Override
	public int indexOf(String value) {
		initPython();
		if (pexec.isImplemented(4)) {
			return pexec.execPythonInt("index_of", value);
		} else {
			return super.indexOf(value);
		}
	}

	@Override
	public int compareTo(Axis that) {
		initPython();
		if (pexec.isImplemented(5)) {
			return pexec.execPythonInt("compare_to", that);
		} else {
			return super.compareTo(that);
		}
	}

	@Override
	public String getName() {
		initPython();
		if (pexec.isImplemented(6)) {
			return (String) pexec.execPython("get_name");
		} else {
			return super.getName();
		}
	}

	@Override
	public List<String> getValues() {
		initPython();
		if (pexec.isImplemented(7)) {
			return (List) pexec.execPython("get_values");
		} else {
			return super.getValues();
		}
	}

	@Override
	public List<String> rebuild(MatrixBuildExecution context) {
		initPython();
		if (pexec.isImplemented(8)) {
			return (List) pexec.execPython("rebuild", context);
		} else {
			return super.rebuild(context);
		}
	}

	@Override
	public AxisDescriptor getDescriptor() {
		initPython();
		if (pexec.isImplemented(9)) {
			return (AxisDescriptor) pexec.execPython("get_descriptor");
		} else {
			return super.getDescriptor();
		}
	}

	@Override
	public String toString() {
		initPython();
		if (pexec.isImplemented(10)) {
			return (String) pexec.execPython("to_string");
		} else {
			return super.toString();
		}
	}

	@Override
	public String getValueString() {
		initPython();
		if (pexec.isImplemented(11)) {
			return (String) pexec.execPython("get_value_string");
		} else {
			return super.getValueString();
		}
	}

	@Override
	public Object readResolve() {
		initPython();
		if (pexec.isImplemented(12)) {
			return (Object) pexec.execPython("read_resolve");
		} else {
			return super.readResolve();
		}
	}

	@Override
	public void addBuildVariable(String value, Map<String, String> map) {
		initPython();
		if (pexec.isImplemented(13)) {
			pexec.execPythonVoid("add_build_variable", value, map);
		} else {
			super.addBuildVariable(value, map);
		}
	}

	public boolean superIsSystem() {
		return super.isSystem();
	}

	public Iterator<String> superIterator() {
		return super.iterator();
	}

	public int superSize() {
		return super.size();
	}

	public String superValue(int index) {
		return super.value(index);
	}

	public int superIndexOf(String value) {
		return super.indexOf(value);
	}

	public int superCompareTo(Axis that) {
		return super.compareTo(that);
	}

	public String superGetName() {
		return super.getName();
	}

	public List<String> superGetValues() {
		return super.getValues();
	}

	public List<String> superRebuild(MatrixBuildExecution context) {
		return super.rebuild(context);
	}

	public AxisDescriptor superGetDescriptor() {
		return super.getDescriptor();
	}

	public String superToString() {
		return super.toString();
	}

	public String superGetValueString() {
		return super.getValueString();
	}

	public Object superReadResolve() {
		return super.readResolve();
	}

	public void superAddBuildVariable(String value, Map<String, String> map) {
		super.addBuildVariable(value, map);
	}

	public Object execPython(String function, Object... params) {
		initPython();
		return pexec.execPython(function, params);
	}

	public byte execPythonByte(String function, Object... params) {
		initPython();
		return pexec.execPythonByte(function, params);
	}

	public short execPythonShort(String function, Object... params) {
		initPython();
		return pexec.execPythonShort(function, params);
	}

	public char execPythonChar(String function, Object... params) {
		initPython();
		return pexec.execPythonChar(function, params);
	}

	public int execPythonInt(String function, Object... params) {
		initPython();
		return pexec.execPythonInt(function, params);
	}

	public long execPythonLong(String function, Object... params) {
		initPython();
		return pexec.execPythonLong(function, params);
	}

	public float execPythonFloat(String function, Object... params) {
		initPython();
		return pexec.execPythonFloat(function, params);
	}

	public double execPythonDouble(String function, Object... params) {
		initPython();
		return pexec.execPythonDouble(function, params);
	}

	public boolean execPythonBool(String function, Object... params) {
		initPython();
		return pexec.execPythonBool(function, params);
	}

	public void execPythonVoid(String function, Object... params) {
		initPython();
		pexec.execPythonVoid(function, params);
	}
}
